// clang-format off
DEFINE_UI_PARAMS(gain1, Band 16:1 Contrast, DCTLUI_SLIDER_FLOAT, 1.0, 0.0, 2.0, 0.1)
DEFINE_UI_PARAMS(gain2, Band 8:1 Contrast, DCTLUI_SLIDER_FLOAT, 1.0, 0.0, 2.0, 0.1)
DEFINE_UI_PARAMS(gain3, Band 4:1 Contrast, DCTLUI_SLIDER_FLOAT, 1.0, 0.0, 2.0, 0.1)
DEFINE_UI_PARAMS(gain4, Band 2:1 Contrast, DCTLUI_SLIDER_FLOAT, 1.0, 0.0, 2.0, 0.1)
DEFINE_UI_PARAMS(debug_band, Debug Band, DCTLUI_SLIDER_INT, 4, 1, 4, 1)
DEFINE_UI_PARAMS(debug_mode, Debug Mode, DCTLUI_COMBO_BOX, 0, {NONE, LP, HP, HPG}, {None, Low Pass Mode, High Pass Mode, High Pass Gray Mode})
DEFINE_UI_PARAMS(performance_mode, Performance Mode, DCTLUI_COMBO_BOX, 0, {PEROFRMANCE, QUALITY}, {Performance, Quality})
DEFINE_UI_PARAMS(method, Method, DCTLUI_COMBO_BOX, 1, {QUOTIENT, DIFFERENCE}, {Quotient, Difference})

// clang-format on

__DEVICE__ float powf(float base, float exp) {
    float out = _copysignf(_powf(_fabs(base), exp), base);
    return out;
}

__DEVICE__ float3 get_color(int p_X, int p_Y, __TEXTURE__ p_TexR, __TEXTURE__ p_TexG, __TEXTURE__ p_TexB) {
    float r = _tex2D(p_TexR, p_X, p_Y);
    float g = _tex2D(p_TexG, p_X, p_Y);
    float b = _tex2D(p_TexB, p_X, p_Y);

    return make_float3(r, g, b);
}

///////////////////////////////
// Nearest Neighbors sampling
//////////////////////////////

__DEVICE__ float sample_point_nn_1ch(float x, float y, __TEXTURE__ tex, float scale, bool clamp) {
    const float scale_round = _round(scale);
    const int iX = (int)(_round(x / scale_round) * scale_round);
    const int iY = (int)(_round(y / scale_round) * scale_round);
    float c = _tex2D(tex, iX, iY);
    if (clamp) {
        c = _fmaxf(c, 0.0);
    }
    return c;
}

__DEVICE__ float3
sample_point_nn_3ch(float x, float y, __TEXTURE__ p_TexR, __TEXTURE__ p_TexG, __TEXTURE__ p_TexB, float scale, bool clamp) {
    float3 out = make_float3(0.0, 0.0, 0.0);
    out.x = sample_point_nn_1ch(x, y, p_TexR, scale, clamp);
    out.y = sample_point_nn_1ch(x, y, p_TexG, scale, clamp);
    out.z = sample_point_nn_1ch(x, y, p_TexB, scale, clamp);
    return out;
}

//////////////////////////
// Fast Blur method
//////////////////////////

// Sampling Kernel
// Lower left 0 is the (0,0) coordinate.
// Number indicates the band, takes 64 samples
// and constructs a box blur of varying qualities
// of edge size 2, 4, 8, 16

// - - - - 3 - - - 3 - - - 3 - - -
// - - - - - - - - - - - - - - - -
// - - 3 - - - 3 - - - 3 - - 3 - -
// 3 - - - - - - - - - - - - - - -
// - - - - - 2 - 2 - 2 - 2 - - - 3
// - - 3 - 2 - 2 - 2 - 2 - - - - -
// - - - - - 2 1 1 1 1 - 2 - 3 - -
// 3 - - - 2 - 1 0 0 1 2 - - - - -
// - - - - - 2 1 0 0 1 - 2 - - - 3
// - - 3 - 2 - 1 1 1 1 2 - - - - -
// - - - - - 2 - 2 - 2 - 2 - 3 - -
// 3 - - - 2 - 2 - 2 - 2 - - - - -
// - - - - - - - - - - - - - - - 3
// - - 3 - - 3 - - - 3 - - - 3 - -
// - - - - - - - - - - - - - - - -
// - - - 3 - - - 3 - - - 3 - - - -

__CONSTANT__ int band0_idxs[4][2] = {
    {0, 0},
    {0, 1},
    {1, 0},
    {1, 1},
};

__CONSTANT__ int band1_idxs[12][2] = {
    {-1, -1},
    {-1, 0},
    {-1, 1},
    {-1, 2},
    {0, 2},
    {1, 2},
    {2, 2},
    {2, 1},
    {2, 0},
    {2, -1},
    {1, -1},
    {0, -1},
};

__CONSTANT__ int band2_idxs[24][2] = {
    {-2, -2}, {-2, 0}, {-2, 2}, {-1, 3}, {1, 3}, {3, 3}, {3, 1}, {3, -1}, {2, -2}, {0, -2}, {-3, -3}, {-3, -1},
    {-3, 1},  {-3, 3}, {-2, 4}, {0, 4},  {2, 4}, {4, 4}, {4, 2}, {4, 0},  {4, -2}, {3, -3}, {1, -3},  {-1, -3},
};

__CONSTANT__ int band3_idxs[24][2] = {
    {-5, -5},                    // *
    {-5, -1}, {-5, 3},  {-5, 6}, // *
    {-1, 6},  {3, 6},   {6, 6},  // *
    {6, 2},   {6, -2},  {6, -5}, // *
    {2, -5},  {-2, -5}, {-7, -4}, {-7, 1}, {-7, 5}, {-3, 8}, {1, 8}, {5, 8}, {8, 4}, {8, 0}, {8, -4}, {4, -7}, {0, -7}, {-4, -7},
};

__DEVICE__ void get_blur_bands(int px, int py, __TEXTURE__ pr, __TEXTURE__ pg, __TEXTURE__ pb, float scale, float3 ret[4], bool clamp) {
    // Blurs the image by four different amounts, returns each one in ret.
    float3 total = make_float3(0.0, 0.0, 0.0);
    float coeff = 0.0;
    float coeff_sum = 0.0;
    float3 value;
    float x, y;
    scale = _fmaxf(1.0, scale);
    for (int i = 0; i < 4; ++i) {
        x = px + ((float)band0_idxs[i][0] - 0.5) * scale;
        y = py + ((float)band0_idxs[i][1] - 0.5) * scale;
        value = sample_point_nn_3ch(x, y, pr, pg, pb, 1.0, clamp);
        coeff = 1.0;
        total += value * coeff;
        coeff_sum += coeff;
    }
    ret[3] = total / coeff_sum;
    for (int i = 0; i < 12; ++i) {
        x = px + ((float)band1_idxs[i][0] - 0.5) * scale;
        y = py + ((float)band1_idxs[i][1] - 0.5) * scale;
        value = sample_point_nn_3ch(x, y, pr, pg, pb, 1.0, clamp);
        coeff = 1.0;
        total += value * coeff;
        coeff_sum += coeff;
    }
    ret[2] = total / coeff_sum;
    for (int i = 0; i < 24; ++i) {
        x = px + ((float)band2_idxs[i][0] - 0.5) * scale;
        y = py + ((float)band2_idxs[i][1] - 0.5) * scale;
        value = sample_point_nn_3ch(x, y, pr, pg, pb, 1.0, clamp);
        coeff = 1.0;
        total += value * coeff;
        coeff_sum += coeff;
    }
    ret[1] = total / coeff_sum;
    for (int i = 0; i < 24; ++i) {
        x = px + ((float)band3_idxs[i][0] - 0.5) * scale;
        y = py + ((float)band3_idxs[i][1] - 0.5) * scale;
        value = sample_point_nn_3ch(x, y, pr, pg, pb, 1.0, clamp);
        coeff = 1.0;
        total += value * coeff;
        coeff_sum += coeff;
    }
    ret[0] = total / coeff_sum;
}

__DEVICE__ void
get_blur_bands_quality(int px, int py, __TEXTURE__ pr, __TEXTURE__ pg, __TEXTURE__ pb, float scale, float3 ret[4], bool clamp) {
    // Blurs the image by four different amounts, returns each one in ret.
    scale = _fmaxf(1.0, scale);

    float3 value;
    int window_radius = 8 * scale;
    float3 band_total_values[4] = {
        make_float3(0.0, 0.0, 0.0), make_float3(0.0, 0.0, 0.0), make_float3(0.0, 0.0, 0.0), make_float3(0.0, 0.0, 0.0)};
    float band_total_weights[4] = {0.0, 0.0, 0.0, 0.0};

    for (int y = -window_radius; y <= window_radius; y++) {
        for (int x = -window_radius; x <= window_radius; x++) {
            float curr_distance = _hypotf((float)x, (float)y) / scale;
            float curr_weight = 1.0;
            int ret_idx;
            if (curr_distance < 2) {
                ret_idx = 3;
                // curr_weight = 1.0;
            } else if (curr_distance < 3) {
                ret_idx = 2;
                // curr_weight = 1.0;
            } else if (curr_distance < 5) {
                ret_idx = 1;
                curr_weight = 0.75;
            } else if (curr_distance <= 8) {
                // Low pass
                ret_idx = 0;
                curr_weight = 0.50;
            } else {
                continue;
            }

            value = sample_point_nn_3ch(px + x, py + y, pr, pg, pb, 1.0, clamp);

            band_total_values[ret_idx] += value * curr_weight;
            band_total_weights[ret_idx] += curr_weight;
        }
    }

    ret[3] = band_total_values[3] / band_total_weights[3];
    for (int i = 2; i >= 0; i--) {
        // Aggregate it so the low frequency bands include the weights and samples from the higher frequency bands.
        band_total_values[i] += band_total_values[i + 1];
        band_total_weights[i] += band_total_weights[i + 1];
        ret[i] = band_total_values[i] / band_total_weights[i];
    }
}

// Return the minimum new_width that would resolve the line pairs.
__DEVICE__ int compute_scale(float gate_width, float lpmm) {
    // By nyquist, x line pairs requires 2x samples to resolve. Thus:
    int new_width = (int)(lpmm * gate_width * 2.0);
    return new_width;
}

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, __TEXTURE__ p_TexR, __TEXTURE__ p_TexG, __TEXTURE__ p_TexB) {
    float3 curr_color = get_color(p_X, p_Y, p_TexR, p_TexG, p_TexB);
    // float scale = (float)p_Width / (float)compute_scale(gate_width, lpm4);
    float scale = 2.0;
    float3 downres[4] = {
        make_float3(0.0, 0.0, 0.0),
        make_float3(0.0, 0.0, 0.0),
        make_float3(0.0, 0.0, 0.0),
        make_float3(0.0, 0.0, 0.0),
    };
    float3 edges[4] = {
        make_float3(0.0, 0.0, 0.0),
        make_float3(0.0, 0.0, 0.0),
        make_float3(0.0, 0.0, 0.0),
        make_float3(0.0, 0.0, 0.0),
    };
    float gains[4] = {gain1, gain2, gain3, gain4};

    if (performance_mode == PEROFRMANCE) {
        get_blur_bands(p_X, p_Y, p_TexR, p_TexG, p_TexB, scale, downres, method == QUOTIENT);
    } else if (performance_mode == QUALITY) {
        get_blur_bands_quality(p_X, p_Y, p_TexR, p_TexG, p_TexB, scale * 0.75, downres, method == QUOTIENT);
    }

    float3 result = downres[0];
    if (method == QUOTIENT) {
        edges[0] = downres[1] / downres[0];
        edges[1] = downres[2] / downres[1];
        edges[2] = downres[3] / downres[2];
        edges[3] = curr_color / downres[3];
        for (int i = 0; i < 4; ++i) {
            result.x *= powf(edges[i].x, gains[i]);
            result.y *= powf(edges[i].y, gains[i]);
            result.z *= powf(edges[i].z, gains[i]);
        }
    } else {
        edges[0] = downres[1] - downres[0];
        edges[1] = downres[2] - downres[1];
        edges[2] = downres[3] - downres[2];
        edges[3] = curr_color - downres[3];
        for (int i = 0; i < 4; ++i) {
            result += edges[i] * gains[i];
        }
    }

    if (debug_mode == LP) {
        result = downres[debug_band - 1];
    } else if (debug_mode == HP) {
        result = edges[debug_band - 1];
    } else if (debug_mode == HPG) {
        if (method == QUOTIENT) {
            // edges are 1.0 on average
            result = edges[debug_band - 1] * 0.5;
        } else {
            // edges are 0.0 on average
            result = 0.5 + edges[debug_band - 1];
        }
    }
    return result;
}
