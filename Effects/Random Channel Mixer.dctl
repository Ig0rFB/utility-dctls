DEFINE_UI_PARAMS(seed, Seed, DCTLUI_SLIDER_INT, 1, 1, 200, 1)
DEFINE_UI_PARAMS(eps, Eps, DCTLUI_SLIDER_FLOAT, 0.2, 0.0, 1.0, 0.01)
DEFINE_UI_PARAMS(maintain_white, Maintain White, DCTLUI_CHECK_BOX, 1)

typedef struct
{
    float c00, c01, c02;
    float c10, c11, c12;
    float c20, c21, c22;
} Matrix;


__DEVICE__ float random(float seed) {
    uint old_seed = *((uint*)&seed);
    const uint m = (1 << 31) - 1;
    const uint a = 48271;
    uint new_seed = (a * old_seed) % m;
    return ((float) new_seed) / (float) m * 2 - 1;
}

__DEVICE__ float3 matmul(float3 rgb, Matrix A) {
    float3 output = make_float3(0.0, 0.0, 0.0);
    output.x = A.c00 * rgb.x + A.c01 * rgb.y + A.c02 * rgb.z;
    output.y = A.c10 * rgb.x + A.c11 * rgb.y + A.c12 * rgb.z;
    output.z = A.c20 * rgb.x + A.c21 * rgb.y + A.c22 * rgb.z;
    return output;
}

__DEVICE__ float matrix_sum(Matrix A) {
    return A.c00 + A.c01 + A.c02 + A.c10 + A.c11 + A.c12 + A.c20 + A.c21 + A.c22;
}

__DEVICE__ void scale_matrix_rows_to_1(Matrix* A) {
    float r0_sum = A->c00 + A->c01 + A->c02;
    float r1_sum = A->c10 + A->c11 + A->c12;
    float r2_sum = A->c20 + A->c21 + A->c22;
    A->c00 /= r0_sum;
    A->c01 /= r0_sum;
    A->c02 /= r0_sum;
    A->c10 /= r1_sum;
    A->c11 /= r1_sum;
    A->c12 /= r1_sum;
    A->c20 /= r2_sum;
    A->c21 /= r2_sum;
    A->c22 /= r2_sum;
}

__DEVICE__ void scale_matrix(Matrix* A, float c) {
    A->c00 *= c;
    A->c01 *= c;
    A->c02 *= c;
    A->c10 *= c;
    A->c11 *= c;
    A->c12 *= c;
    A->c20 *= c;
    A->c21 *= c;
    A->c22 *= c;
}

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B)
{
    uint state = seed;

    Matrix mat;
    mat.c00 = random(state);
    mat.c01 = random(mat.c00);
    mat.c02 = random(mat.c01);
    mat.c10 = random(mat.c02);
    mat.c11 = random(mat.c10);
    mat.c12 = random(mat.c11);
    mat.c20 = random(mat.c12);
    mat.c21 = random(mat.c20);
    mat.c22 = random(mat.c21);

    mat.c00 *= eps;
    mat.c01 *= eps;
    mat.c02 *= eps;
    mat.c10 *= eps;
    mat.c11 *= eps;
    mat.c12 *= eps;
    mat.c20 *= eps;
    mat.c21 *= eps;
    mat.c22 *= eps;

    mat.c00 += 1.0;
    mat.c11 += 1.0;
    mat.c22 += 1.0;

    if (maintain_white) {
        // each row should sum to 1.
        scale_matrix_rows_to_1(&mat);
    } else {
        float mat_sum = matrix_sum(mat);
        scale_matrix(&mat, 3.0f / mat_sum);
    }

    float3 curr_color = make_float3(p_R, p_G, p_B);
    float3 output_color = matmul(curr_color, mat);
    return output_color;
}

