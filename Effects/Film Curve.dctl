DEFINE_UI_PARAMS(mid_gray, Mid Gray, DCTLUI_VALUE_BOX, 0.18)
DEFINE_UI_PARAMS(exposure, Exposure Gain, DCTLUI_VALUE_BOX, 0.1)
DEFINE_UI_PARAMS(gamma_r, Red Gamma, DCTLUI_SLIDER_FLOAT, 1.0, 0.0, 10.0, 0.01)
DEFINE_UI_PARAMS(gamma_g, Green Gamma, DCTLUI_SLIDER_FLOAT, 1.0, 0.0, 10.0, 0.01)
DEFINE_UI_PARAMS(gamma_b, Blue Gamma, DCTLUI_SLIDER_FLOAT, 1.0, 0.0, 10.0, 0.01)
DEFINE_UI_PARAMS(dmin_r, Red D_MIN, DCTLUI_SLIDER_FLOAT, 0.01, 0.0, 10.0, 0.01)
DEFINE_UI_PARAMS(dmin_g, Green D_MIN, DCTLUI_SLIDER_FLOAT, 0.01, 0.0, 10.0, 0.01)
DEFINE_UI_PARAMS(dmin_b, Blue D_MIN, DCTLUI_SLIDER_FLOAT, 0.01, 0.0, 10.0, 0.01)
DEFINE_UI_PARAMS(dmax_r, Red D_MAX, DCTLUI_SLIDER_FLOAT, 4.0, 0.0, 10.0, 0.01)
DEFINE_UI_PARAMS(dmax_g, Green D_MAX, DCTLUI_SLIDER_FLOAT, 4.0, 0.0, 10.0, 0.01)
DEFINE_UI_PARAMS(dmax_b, Blue D_MAX, DCTLUI_SLIDER_FLOAT, 4.0, 0.0, 10.0, 0.01)
DEFINE_UI_PARAMS(offset_r, Red Offset, DCTLUI_VALUE_BOX, 0.0)
DEFINE_UI_PARAMS(offset_g, Green Offset, DCTLUI_VALUE_BOX, 0.0)
DEFINE_UI_PARAMS(offset_b, Blue Offset, DCTLUI_VALUE_BOX, 0.0)

DEFINE_UI_PARAMS(lin_to_exp, Linear to Exposure, DCTLUI_CHECK_BOX, 1)
DEFINE_UI_PARAMS(exp_to_log_exp, Exposure to Log10 Exposure, DCTLUI_CHECK_BOX, 1)
DEFINE_UI_PARAMS(log_exp_to_density, Characteristic Curve, DCTLUI_CHECK_BOX, 1)
DEFINE_UI_PARAMS(density_to_transmittance, Density to Transmittance, DCTLUI_CHECK_BOX, 1)


__DEVICE__ float sigmoid(float x) {
    return 1.0 / (1.0 + _expf(-1.0 * x));
}

__DEVICE__ float characteristic_curve(float x, float gamma, float dmin, float dmax, float offset) {
    float coeff = gamma / 0.25;
    float out = sigmoid(coeff * (x + offset)) * (dmax - dmin) + dmin;
    return out;
}


__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B) {
    float3 curr_color = make_float3(p_R, p_G, p_B);

    if (lin_to_exp) {
        curr_color *= exposure;
    }

    curr_color *= 1.0 / mid_gray; // scale middle gray to the midpoint of sigmoid.

    if (exp_to_log_exp) {
        curr_color = make_float3(
            _log10f(curr_color.x),
            _log10f(curr_color.y),
            _log10f(curr_color.z)
        );
    }

    if (log_exp_to_density) {
        curr_color = make_float3(
            characteristic_curve(curr_color.x, gamma_r, dmin_r, dmax_r, offset_r),
            characteristic_curve(curr_color.y, gamma_g, dmin_g, dmax_g, offset_g),
            characteristic_curve(curr_color.z, gamma_b, dmin_b, dmax_b, offset_b)
        );
    }

    if (density_to_transmittance) {
        curr_color = make_float3(
            _exp10f(-1.0 * curr_color.x),
            _exp10f(-1.0 * curr_color.y),
            _exp10f(-1.0 * curr_color.z)
        );
    }

    return curr_color;
}