DEFINE_UI_PARAMS(saturation_opt, Saturation Type, DCTLUI_COMBO_BOX, 0, {HSL, HSV}, {HSL, HSV})
DEFINE_UI_PARAMS(sat_gain, Gain, DCTLUI_SLIDER_FLOAT, 1.0, 0.0, 10.0, 0.01)
DEFINE_UI_PARAMS(sat_gamma, Gamma, DCTLUI_SLIDER_FLOAT, 0.0, -1.0, 1.0, 0.01)
DEFINE_UI_PARAMS(show_sat, Show Saturation, DCTLUI_CHECK_BOX, 0)

__DEVICE__ float3 hsl_to_rgb(float h, float s, float l) {
    float H = _fmod(h * 360.0f, 360.0f);
    float C = (1.0f - _fabs(2.0f * l - 1.0f)) * s;
    float X = C * (1 - _fabs(_fmod(H / 60.0f, 2.0f) - 1.0f));
    float m = l - (C / 2.0f);

    float3 colorp;
    if (0.0f <= H && H < 60.0f) {
        colorp = make_float3(C, X, 0.0f);
    } else if (60.0f <= H && H <= 120.0f) {
        colorp = make_float3(X, C, 0.0f);
    } else if (120.0f <= H && H <= 180.0f) {
        colorp = make_float3(0.0f, C, X);
    } else if (180.0f <= H && H <= 240.0f) {
        colorp = make_float3(0.0f, X, C);
    } else if (240.0f <= H && H <= 300.0f) {
        colorp = make_float3(X, 0.0f, C);
    } else {
        colorp = make_float3(C, 0.0f, X);
    }
    float3 color = make_float3(colorp.x + m, colorp.y + m, colorp.z + m);
    return color;
}

__DEVICE__ float3 hsv_to_rgb(float h, float s, float v) {
    float H = _fmod(h * 360.0f, 360.0f);
    float C = s * v;
    float X = C * (1 - _fabs(_fmod(H / 60.0f, 2.0f) - 1.0f));
    float m = v - C;

    float3 colorp;
    if (0.0f <= H && H < 60.0f) {
        colorp = make_float3(C, X, 0.0f);
    } else if (60.0f <= H && H <= 120.0f) {
        colorp = make_float3(X, C, 0.0f);
    } else if (120.0f <= H && H <= 180.0f) {
        colorp = make_float3(0.0f, C, X);
    } else if (180.0f <= H && H <= 240.0f) {
        colorp = make_float3(0.0f, X, C);
    } else if (240.0f <= H && H <= 300.0f) {
        colorp = make_float3(X, 0.0f, C);
    } else {
        colorp = make_float3(C, 0.0f, X);
    }
    float3 color = make_float3(colorp.x + m, colorp.y + m, colorp.z + m);
    return color;
}

__DEVICE__ float3 rgb_to_hsl(float r, float g, float b) {
    float c_max = _fmaxf(_fmaxf(r, g), b);
    float c_min = _fminf(_fminf(r, g), b);
    float delta = c_max - c_min;

    float H;
    if (delta == 0.0f) {
        H = 0.0f;
    } else if (r >= g && r >= b) {
        H = _fmod((g - b) / delta, (6.0f));
    } else if (g >= r && g >= b) {
        H = (b - r) / delta + (2.0f);
    } else {
        // b >= r && b >= g
        H = (r - g) / delta + 4.0f;
    }
    H = H / 6.0f;

    float L = (c_min + c_max) / 2.0f;
    float S;
    if (c_max == 0.0f) {
        S = 0.0f;
    } else {
        S = delta / (1 - _fabs(2.0f * L - 1));
    }

    float3 color = make_float3(H, S, L);
    return color;
}

__DEVICE__ float3 rgb_to_hsv(float r, float g, float b) {
    float c_max = _fmaxf(_fmaxf(r, g), b);
    float c_min = _fminf(_fminf(r, g), b);
    float delta = c_max - c_min;

    float H;
    if (delta == 0.0f) {
        H = 0.0f;
    } else if (r >= g && r >= b) {
        H = _fmod((g - b) / delta, (6.0f));
    } else if (g >= r && g >= b) {
        H = (b - r) / delta + (2.0f);
    } else {
        // b >= r && b >= g
        H = (r - g) / delta + 4.0f;
    }
    H = H / 6.0f;

    float S;
    if (c_max == 0.0f) {
        S = 0.0f;
    } else {
        S = delta / c_max;
    }
    float V = c_max;

    float3 color = make_float3(H, S, V);
    return color;
}

__DEVICE__ float convert_gamma(float g) {
    // Converts -1 to +1 range to an exponent
    // Essentially what Resolve does with its gamma
    // correction.
    float out;
    if (g <= 0) {
        out = 1.0f + (-4.0f * g);
    } else {
        out = 1.0f / (4.0f * g + 1);
    }
    return out;
}


__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B) {
    float3 output_color;
    float3 hsv_color;
    float3 input_color = make_float3(p_R, p_G, p_B);

    if (saturation_opt == HSL) {
        hsv_color = rgb_to_hsl(p_R, p_G, p_B);
    } else {
        // saturation_opt == HSV
        hsv_color = rgb_to_hsv(p_R, p_G, p_B);
    }

    float s = _powf(hsv_color.y, convert_gamma(sat_gamma)) * sat_gain;

    if (show_sat == 0) {
        if (saturation_opt == HSL) {
            output_color = hsl_to_rgb(hsv_color.x, s, hsv_color.z);
        } else {
            // saturation_opt == HSV
            output_color = hsv_to_rgb(hsv_color.x, s, hsv_color.z);
        }
    } else {
        // Just show resulting saturation channel
        output_color = make_float3(s, s, s);
    }
    return output_color;
}