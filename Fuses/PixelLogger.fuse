FuRegisterClass("PixelLogger",
    CT_Tool, {
        REGS_Name = "Pixel Logger",
        REGS_Category = "Fuses\\Util",
        REGS_OpIconString = "PixLg",
        REGS_OpDescription = "Extracts the RGB value at the specified pixel and prints it to console."
    }
)

function Create()
    PixelLocation = self:AddInput("Pixel Location", "PixelLocation", {
        LINKID_DataType = "Point",
        INPID_InputControl = "OffsetControl",
        INPID_PreviewControl = "CrosshairControl",
        INP_DoNotifyChanged = true,
    })

    FirstFrame = self:AddInput("First Frame", "FirstFrame", {
        LINKID_DataType = "Number",
        INPID_InputControl = "ScrewControl",
        INP_Default = 0.0,
        INP_INTEGER = true,
        IC_DisplayedPrecision = 0,
    })

    LastFrame = self:AddInput("Last Frame", "LastFrame", {
        LINKID_DataType = "Number",
        INPID_InputControl = "ScrewControl",
        INP_Default = 1000.0,
        INP_INTEGER = true,
        IC_DisplayedPrecision = 0,
    })

    IndexOffset = self:AddInput("Index Offset", "IndexOffset", {
        LINKID_DataType = "Number",
        INPID_InputControl = "ScrewControl",
        INP_Default = 0.0,
        INP_INTEGER = true,
        INP_MinAllowed = 0.0,
        IC_DisplayedPrecision = 0,
    })

    SkipMissingFrames = self:AddInput("Skip Missing Frames", "SkipMissingFrames", {
        LINKID_DataType = "Number",
        INPID_InputControl = "CheckboxControl",
        INP_Default = 1.0,
        INP_INTEGER = true,
    })

    Filename = self:AddInput("CSV Filename", "Filename", {
        LINKID_DataType = "Text",
        INPID_InputControl = "FileControl",
        FC_ClipBrowse = false,
        FC_IsSaver = true,
        FC_PathBrowse = false,
        FCS_FilterString = "CSV Files (*.csv)|*.csv",
        INP_DoNotifyChanged = true,
        INP_ForceNotify = false,
        INP_InitialNotify = true,
    })
    WriteButton = self:AddInput("Write File", "WriteFile", {
        LINKID_DataType = "Number",
        INPID_InputControl = "ButtonControl",
        INP_DoNotifyChanged = true,
        INP_External = false,
    })

    -- Inputs

    InImage = self:AddInput("Input", "Input", {
        LINKID_DataType = "Image",
        LINK_Main = 1,
    })
    OutImage = self:AddOutput("Output", "Output", {
        LINKID_DataType = "Image",
        LINK_Main = 1,
    })
end

function NotifyChanged(inp, param, time)
    if ((inp == WriteButton) and (param.Value == 1)) then

        local filetype_str = "csv"

        local filename = Filename:GetSource(time).Value
        assert(filename ~= "", "No filename specified")
        local expected_suffix = "." .. filetype_str
        if string.sub(filename, -1 * expected_suffix:len()):lower() ~= expected_suffix then
            filename = filename .. expected_suffix
        end
        assert(string.sub(filename, -1 * expected_suffix:len()):lower() == expected_suffix, "Filename does not end with " .. expected_suffix)
        print("Writing CSV file to " .. filename)

        local file = io.open(filename, "w")
        -- Write header
        local curr_line = "frame,red,green,blue"
        print(curr_line)
        file:write(curr_line.."\n")

        local first_frame = FirstFrame:GetSource(0).Value
        local last_frame = LastFrame:GetSource(0).Value
        local idx_offset = IndexOffset:GetSource(0).Value
        local skip_missing_frames = SkipMissingFrames:GetSource(0).Value
        local p = Pixel()
        for i = first_frame, last_frame do
            local curr_location = PixelLocation:GetSource(0)
            local img = InImage:GetSource(i)
            if img == nil then
                if skip_missing_frames < 0.5 then
                    file:close()
                    assert(img ~= nil, "Missing frame " .. i .. " in input image sequence")
                end
            else
                img:GetPixel(curr_location.X, curr_location.Y, p)
                curr_line = (i + idx_offset) .. "," .. p.R .. "," .. p.G .. "," .. p.B
                print(curr_line)
                file:write(curr_line.."\n")
            end
        end
        file:close()
    end
end

function Process(req)
    local img = InImage:GetValue(req)
    local out = img:Copy()
    OutImage:Set(req, out)
end
