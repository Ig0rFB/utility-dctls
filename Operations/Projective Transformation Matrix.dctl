#line 2
// clang-format off
DEFINE_UI_PARAMS(mat0, Red => Red, DCTLUI_VALUE_BOX, 1.0)
DEFINE_UI_PARAMS(mat1, Green => Red, DCTLUI_VALUE_BOX, 0.0)
DEFINE_UI_PARAMS(mat2, Blue => Red, DCTLUI_VALUE_BOX, 0.0)
DEFINE_UI_PARAMS(mat3, Bias => Red, DCTLUI_VALUE_BOX, 0.0)
DEFINE_UI_PARAMS(mat4, Red => Green, DCTLUI_VALUE_BOX, 0.0)
DEFINE_UI_PARAMS(mat5, Green => Green, DCTLUI_VALUE_BOX, 1.0)
DEFINE_UI_PARAMS(mat6, Blue => Green, DCTLUI_VALUE_BOX, 0.0)
DEFINE_UI_PARAMS(mat7, Bias => Green, DCTLUI_VALUE_BOX, 0.0)
DEFINE_UI_PARAMS(mat8, Red => Blue, DCTLUI_VALUE_BOX, 0.0)
DEFINE_UI_PARAMS(mat9, Green => Blue, DCTLUI_VALUE_BOX, 0.0)
DEFINE_UI_PARAMS(mat10, Blue => Blue, DCTLUI_VALUE_BOX, 1.0)
DEFINE_UI_PARAMS(mat11, Bias => Blue, DCTLUI_VALUE_BOX, 0.0)
DEFINE_UI_PARAMS(mat12, Red => Bias, DCTLUI_VALUE_BOX, 0.0)
DEFINE_UI_PARAMS(mat13, Green => Bias, DCTLUI_VALUE_BOX, 0.0)
DEFINE_UI_PARAMS(mat14, Blue => Bias, DCTLUI_VALUE_BOX, 0.0)
DEFINE_UI_PARAMS(mat15, Bias => Bias, DCTLUI_VALUE_BOX, 1.0)
DEFINE_UI_PARAMS(preserve_neutral, Preserve Neutral, DCTLUI_CHECK_BOX, 0)
// clang-format on

__DEVICE__ float4 mv_44_4(float mat[4][4], float4 v) {
    float4 out = make_float4(mat[0][0] * v.x + mat[0][1] * v.y + mat[0][2] * v.z + mat[0][3] * v.w,
                             mat[1][0] * v.x + mat[1][1] * v.y + mat[1][2] * v.z + mat[1][3] * v.w,
                             mat[2][0] * v.x + mat[2][1] * v.y + mat[2][2] * v.z + mat[2][3] * v.w,
                             mat[3][0] * v.x + mat[3][1] * v.y + mat[3][2] * v.z + mat[3][3] * v.w);
    return out;
}

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B) {
    float4 rgb = make_float4(p_R, p_G, p_B, 1.0);

    float mat[4][4] = {
        {mat0, mat1, mat2, mat3},
        {mat4, mat5, mat6, mat7},
        {mat8, mat9, mat10, mat11},
        {mat12, mat13, mat14, mat15},
    };
    float4 res = mv_44_4(mat, rgb);
    res /= res.w;
    float4 white_out = mv_44_4(mat, make_float4(1.0, 1.0, 1.0, 1.0));
    white_out /= white_out.w;
    if (preserve_neutral) {
        res.x *= 1.0 / white_out.x;
        res.y *= 1.0 / white_out.y;
        res.z *= 1.0 / white_out.z;
    }

    float3 out = make_float3(res.x, res.y, res.z);
    return out;
}
